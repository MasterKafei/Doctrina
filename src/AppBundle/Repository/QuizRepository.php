<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Answer;
use AppBundle\Entity\Quiz;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * QuizRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuizRepository extends EntityRepository
{
    public function getNewQuizzes(User $user)
    {
        $qb = $this->_em->createQuery('
            SELECT DISTINCT  a
            FROM AppBundle:Answer a
        ');

        $answers = $qb->getResult();

        $quizzes = array();
        $quizzesAnswers = array();

        /** @var Answer $answer */
        foreach($answers as $answer)
        {
            $quiz = $answer->getQuestion()->getQuiz();
            if($answer->getUser()->getId() == $user->getId() && !in_array($quiz->getId(), $quizzesAnswers))
            {
                array_push($quizzesAnswers, $quiz->getId());
            }
        }

        /** @var Answer $answer */
        foreach($answers as $answer)
        {
            $quiz = $answer->getQuestion()->getQuiz();
            if(!in_array($quiz->getId(), $quizzesAnswers) && !in_array($quiz, $quizzes))
            {
                array_push($quizzes, $quiz);
            }
        }

        return $quizzes;
    }

    public function getInProgressQuizzes(User $user)
    {
        $quizzes = $this->getUserQuizzes($user);



        return $quizzes;
    }

    public function getCompletedQuizzes(User $user)
    {

    }

    public function getUserQuizzes(User $user)
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('DISTINCT IDENTITY(qst.quiz)')
            ->from('AppBundle:Answer', 'asw')

            ->innerJoin('asw.question', 'qst')
            ->where('asw.user = :user')
            ->setParameter('user', $user);

        return $qb->getQuery()->getResult();
    }

    public function test(User $user)
    {
        $qb = $this->createQueryBuilder('quiz')
            ->select('q')
            ->from('AppBundle:Quiz', 'q')
            ->where('answer.user != :user')
            ->leftJoin('quiz.questions', 'question')
            ->leftJoin('question.answers', 'answer')
            ;

        return $qb->getQuery()->execute();
    }
}
